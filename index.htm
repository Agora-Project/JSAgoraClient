<head>
    <META charset="utf-8">
    <title>Agora</title>
    <style type="text/css">
        .inactive {
            display: none;
        } 
        #AppBody {
            border: 1px solid #e3e3e3;
            border-radius: 4px;
            width: 1320px;
            height: 540px;
            position: relative;
            overflow: hidden;
        }
        #InputPanel {
            width: 280px;
            height: 500px;
            padding: 20px 19px 20px 20px;
            background-color: #f5f5f5;
            border-right: 1px solid #e3e3e3;
            box-shadow: inset 0 1px 1px rgba(0,0,0,0.05);
            position: absolute;
            left: 0;
        } 
        #GraphPanel {
            width: 1000px;
            height: 540px;
            position: absolute;
            left: 320px;
        }
    </style>
    <script type="text/javascript" src="js/libs/java_socket_bridge.js"></script>
    <script type="text/javascript" src="http://www.d3plus.org/js/d3.js"></script>
    <script type="text/javascript" src="http://www.d3plus.org/js/d3plus.js"></script>
    <script type="text/javascript">
        
        var force;
        
        var jsgraph = {
            nodes : [],
            links : []
        };
        
        
        var links = []; 
        
        function logIn() {
                if (JAVA_READY_FLAG === true) {
                    var bridge = getJAgoraBridge();
                    bridge.logIn(d3.select("#usernameField").node().value, d3.select("#passwordField").node().value);
                    clearGraph();
                    loadGraph(bridge.getThread(2));
                }
                else alert("Applet not yet ready.");
            d3.select("#usernameField").property("value", "");
            d3.select("#passwordField").property("value", "");
        }
        
        function loadNodes(d) {
            var bridge = getJAgoraBridge();
            loadGraph(bridge.getArgumentByID(d.post.getID()))
        }
        
        function clearSVG() {
            svg.selectAll("*").remove();
        }
        
        function clearGraph() {
            jsgraph.nodes = [];
            jsgraph.links = [];
        }
        
        function removePost(d) {
            for (i = 0; i < jsgraph.nodes.length; i++) {
                if (jsgraph.nodes[i] == d) {
                    jsgraph.nodes.splice(i,1);
                    break;
                }
            }
            
            loadLinks();
            refreshSVG();
        }
        
        function refreshSVG() {
            clearSVG();
            
            force = d3.layout.force()
                 .nodes(jsgraph.nodes)
                 .links(jsgraph.links)
                 .size([1000, 540])
                 .linkDistance([150])
                 .linkStrength(0.3)
                 .gravity(0.005)
                 .charge([-100])
                 .chargeDistance([300])
                 .start();
            
            edges = svg.selectAll("line")
                .data(jsgraph.links)
                .enter()
                .append("line")
                .style("stroke", "rgb(255,0,0)")
                .style("stroke-width", 1)
                .style("marker-end",  "url(#suit)")
        
            var nodes = svg.selectAll("g")
                .data(jsgraph.nodes)
                .enter()
                .append("g");
        
            var rects = svg.selectAll("g")
                .append("rect")
                .attr("width", 150)
                .attr("height", 60)
                .call(force.drag);
        
            var titles = svg.selectAll("g")
                .append("text")
                .text(function(d) {return d.post.getContent().get("Title");})
                .attr("font-family", "sans-serif")
                .attr("font-size", "11px");
        
            var numPosts = 0;
            var texts = svg.selectAll("g")
                .append("text")
                .text(function(d) {return d.post.getText();})
                .attr("font-size", "11px")
                .attr("font-family", "sans-serif")
                .attr("fill", "white")
                .attr("id", function(d) { return "text" + numPosts++;});
        
            var expandButtons = svg.selectAll("g")
                    .append("rect")
                    .attr("x", 120)
                    .attr("y", 50)
                    .attr("width", 30)
                    .attr("height", 10)
                    .style("fill", "blue")
                    .on("click", loadNodes);
            
            var closeButtons = svg.selectAll("g")
                    .append("rect")
                    .attr("y", 50)
                    .attr("width", 30)
                    .attr("height", 10)
                    .style("fill", "red")
                    .on("click", removePost);
             
            for (i = 0; i < numPosts; i++) {
                    d3plus.textwrap()
                        .container(d3.select("#text" + i))
                        .draw();
                }
                
            svg.append("defs").selectAll("marker")
                .data(["suit", "licensing", "resolved"])
                .enter().append("marker")
                .attr("id", function(d) { return d; })
                .attr("viewBox", "0 -5 10 10")
                .attr("refX", 25)
                .attr("refY", 0)
                .attr("markerWidth", 6)
                .attr("markerHeight", 6)
                .attr("orient", "auto")
                .append("path")
                .attr("d", "M0,-5L10,0L0,5 L10,0 L0, -5")
                .style("stroke", "#4679BD")
                .style("opacity", "0.6");

            
            
            force.on("tick", function() {

                edges.attr("x1", function(d) { return d.source.x + 75; })
                     .attr("y1", function(d) { return d.source.y + 30; })
                     .attr("x2", function(d) { return d.target.x + 75; })
                     .attr("y2", function(d) { return d.target.y + 30; });
             
                for(i = 0; i < jsgraph.links.length; i++) {
                    var targy = jsgraph.nodes[jsgraph.links[i].target.index].y;
                    var sorcy = jsgraph.nodes[jsgraph.links[i].source.index].y;
                    if (sorcy - targy < 80) {
                        jsgraph.nodes[jsgraph.links[i].target.index].y -= 1;
                        jsgraph.nodes[jsgraph.links[i].source.index].y += 1;
                    }
                }
                i = 0;
                //rects.attr("x", function(d, i) { return d.x; })
                //     .attr("y", function(d, i) { return d.y;});
                nodes.attr("transform", function(d) {return "translate("+d.x+","+d.y+")";});
                //titles.attr("x", function(d) { return d.x; })
                 //    .attr("y", function(d) { return d.y -5; });
             
                //texts.attr("x", function(d) { return d.x; })
                //     .attr("y", function(d) { return d.y +15; });
                //texts.selectAll("tspan").attr("x", function(d) { return d.x; });

            });
        }
        
        function loadLinks() {
            for (i = 0; i < links.length; i++) {
                edge = links[i];
                var target = null, origin = null;
                
                for (j = 0; j < jsgraph.nodes.length; j++) {
                    post = jsgraph.nodes[j].post;
                    if (post.getID().equals(edge.getTarget().getID())) {
                        target = j;
                    }
                    if (post.getID().equals(edge.getOrigin().getID())) {
                        origin = j;
                    }
                    if (target != null && origin != null) {
                        jsgraph.links.push({source : origin, target : target});
                        break;
                    }
                }
                
            }
        }
        
        function loadGraph(graph) {
            
            
            var posts = graph.getNodes();
            var newLinks = graph.getAttacks();
            var edge, i, post, j, foundNode;
            
            for (i = 0; i < newLinks.length; i++) {
                links.push(newLinks[i]);
            }
            
            for (i = 0; i < posts.length; i++) {
                foundNode = false;
                for (j = 0; j < jsgraph.nodes.length; j++) {
                    if (jsgraph.nodes[j].post.getID().equals(posts[i].getID())) {
                        foundNode = true;
                        break;
                    }
                }
                if (!foundNode) jsgraph.nodes.push({post : posts[i]});
            }
            
            loadLinks();
            
            refreshSVG();
            
        }
    </script>
</head>

<body>

    <div>
        <applet id="JAgoraJSBridge" archive="JAgoraLib.jar" code="org.agora.lib.JAgoraJSBridge.class" width="1" height="1"></applet>
        <div id="AppBody">
            <div id="InputPanel" class="panel tab-content">
                <div id="LoginPanel" class="tab-pane active">
                    Login
                    <p></p>

                    UserName:

                    <input type="text" id="usernameField">

                    Password:

                    <input type="password" id="passwordField">

                    <button type="button" onclick="logIn()">Submit</button>
                </div>
                <div id="EditPanel" class="tab-pane inactive">
                </div>
            </div>
            <div id="GraphPanel">
            </div>
        </div>
    </div>
    <script type="text/javascript">
        var svg = d3.select("#GraphPanel")
                .append("svg")
                .attr("width", 1000)
                .attr("height", 540);
    </script>
</body>
</html>